var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/components.ts
import { Chart } from "chart.js";
import {
  ref,
  onMounted,
  h,
  onBeforeUnmount,
  watch,
  defineComponent,
  shallowRef,
  set
} from "@vue/composition-api";
import startCase from "lodash-es/startCase.js";
import camelCase from "lodash-es/camelCase.js";
import cloneDeep from "lodash-es/cloneDeep.js";
import isEqual from "lodash-es/isEqual.js";
import { nanoid } from "nanoid";
var pascalCase = (str) => startCase(camelCase(str)).replace(/ /g, "");
var defineChartComponent = (chartId, chartType) => {
  const propsDefs = {
    options: { type: Object, required: false },
    chartId: { default: chartId, type: String },
    width: { default: 400, type: Number },
    height: { default: 400, type: Number },
    cssClasses: { type: String, default: "" },
    styles: { type: Object },
    plugins: { type: Array, default: () => [] },
    chartData: { type: Object, required: true },
    onLabelsUpdate: { type: Function },
    onChartUpdate: { type: Function },
    onChartDestroy: { type: Function },
    onChartRender: { type: Function }
  };
  const componentName = pascalCase(chartId);
  return defineComponent({
    name: componentName,
    props: propsDefs,
    emits: {
      "labels:update": () => true,
      "chart:update": (chartInstance) => true,
      "chart:destroy": () => true,
      "chart:render": (chartInstance) => true
    },
    setup(props, { emit }) {
      const canvasRef = ref();
      const canvasId = `${chartId}-${nanoid(6)}`;
      let chartInstance = shallowRef(null);
      watch(() => props.chartData, watchHandler, { deep: true });
      watch(() => props.options, (newOptions, oldOptions) => {
        if (chartInstance.value && newOptions && !isEqual(chartInstance.value.options, oldOptions)) {
          chartInstance.value.options = cloneDeep(newOptions);
          oldOptions = cloneDeep(newOptions);
          handleChartUpdate();
        }
      }, { deep: true });
      function watchHandler(newData, oldData) {
        if (oldData && chartInstance.value) {
          let chart = chartInstance.value;
          let newDatasetLabels = newData.datasets.map(({ label }) => label);
          let oldDatasetLabels = oldData.datasets.map(({ label }) => label);
          const oldLabels = JSON.stringify(oldDatasetLabels);
          const newLabels = JSON.stringify(newDatasetLabels);
          if (newLabels === oldLabels && oldData.datasets.length === newData.datasets.length && chart) {
            newData.datasets.forEach((dataset, i) => {
              const oldDatasetKeys = Object.keys(oldData.datasets[i]);
              const newDatasetKeys = Object.keys(dataset);
              const deletionKeys = oldDatasetKeys.filter((key) => {
                return key !== "_meta" && newDatasetKeys.indexOf(key) === -1;
              });
              deletionKeys.forEach((deletionKey) => {
                if (chart == null ? void 0 : chart.data.datasets[i]) {
                  delete chart.data.datasets[i][deletionKey];
                }
              });
              for (const attribute in dataset) {
                const attrValue = dataset[attribute];
                if (dataset.hasOwnProperty(attribute) && attrValue != null && chart) {
                  chart.data.datasets[i][attribute] = attrValue;
                }
              }
            });
            if (newData.labels) {
              chart.data.labels = newData.labels;
              handleLabelsUpdate();
            }
          } else {
            set(chart.data, "datasets", newData.datasets);
          }
          handleChartUpdate();
        } else {
          if (chartInstance.value) {
            handleChartDestroy();
          }
          renderChart();
        }
      }
      function renderChart() {
        if (canvasRef.value) {
          chartInstance.value = new Chart(canvasRef.value, {
            data: props.chartData,
            type: chartType,
            options: cloneDeep(props.options),
            plugins: props.plugins
          });
          handleChartRender();
        } else {
          console.error(`Error on component ${componentName}, canvas cannot be rendered. Check if the render appends server-side`);
        }
      }
      function handleLabelsUpdate() {
        var _a;
        emit("labels:update");
        (_a = props.onLabelsUpdate) == null ? void 0 : _a.call(props);
      }
      function handleChartRender() {
        var _a;
        if (chartInstance.value) {
          emit("chart:render", chartInstance.value);
          (_a = props.onChartRender) == null ? void 0 : _a.call(props, chartInstance.value);
        }
      }
      function handleChartUpdate() {
        var _a;
        if (chartInstance.value) {
          chartInstance.value.update();
          emit("chart:render", chartInstance.value);
          (_a = props.onChartRender) == null ? void 0 : _a.call(props, chartInstance.value);
        }
      }
      function handleChartDestroy() {
        var _a, _b;
        (_a = chartInstance.value) == null ? void 0 : _a.destroy();
        emit("chart:destroy");
        (_b = props.onChartDestroy) == null ? void 0 : _b.call(props);
      }
      onMounted(renderChart);
      onBeforeUnmount(() => {
        var _a;
        if (chartInstance.value) {
          (_a = chartInstance.value) == null ? void 0 : _a.destroy();
        }
      });
      return { canvasRef, renderChart, chartInstance, canvasId };
    },
    render() {
      return h("div", {
        style: __spreadProps(__spreadValues({
          maxWidth: "100%"
        }, this.styles), {
          position: "relative"
        }),
        class: this.cssClasses
      }, [
        h("canvas", {
          style: {
            maxWidth: "100%",
            maxHeight: "100%"
          },
          attrs: {
            id: this.canvasId,
            width: this.width,
            height: this.height
          },
          ref: "canvasRef"
        })
      ]);
    }
  });
};

// src/hooks.ts
import { computed, ref as ref2, unref } from "@vue/composition-api";
var defineChartHook = (chartType) => {
  return (params) => {
    const reactiveProps = computed(() => __spreadProps(__spreadValues({}, params), {
      ref: `${chartType}ChartRef`,
      chartData: unref(params.chartData),
      options: unref(params.options)
    }));
    return {
      [`${chartType}ChartProps`]: reactiveProps,
      [`${chartType}ChartRef`]: ref2(null)
    };
  };
};
var useDoughnutChart = defineChartHook("doughnut");
var useBarChart = defineChartHook("bar");
var useLineChart = defineChartHook("line");
var usePieChart = defineChartHook("pie");
var usePolarAreaChart = defineChartHook("polarArea");
var useRadarChart = defineChartHook("radar");
var useBubbleChart = defineChartHook("bubble");
var useScatterChart = defineChartHook("scatter");

// src/index.ts
var BarChart = defineChartComponent("bar-chart", "bar");
var DoughnutChart = defineChartComponent("doughnut-chart", "doughnut");
var LineChart = defineChartComponent("line-chart", "line");
var PieChart = defineChartComponent("pie-chart", "pie");
var PolarAreaChart = defineChartComponent("polar-chart", "polarArea");
var RadarChart = defineChartComponent("radar-chart", "radar");
var BubbleChart = defineChartComponent("bubble-chart", "bubble");
var ScatterChart = defineChartComponent("scatter-chart", "scatter");
var src_default = {
  BarChart,
  DoughnutChart,
  LineChart,
  PieChart,
  PolarAreaChart,
  RadarChart,
  BubbleChart,
  ScatterChart,
  defineChartComponent
};
export {
  BarChart,
  BubbleChart,
  DoughnutChart,
  LineChart,
  PieChart,
  PolarAreaChart,
  RadarChart,
  ScatterChart,
  src_default as default,
  defineChartComponent,
  useBarChart,
  useBubbleChart,
  useDoughnutChart,
  useLineChart,
  usePieChart,
  usePolarAreaChart,
  useRadarChart,
  useScatterChart
};
