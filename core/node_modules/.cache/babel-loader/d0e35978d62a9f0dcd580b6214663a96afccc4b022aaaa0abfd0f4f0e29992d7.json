{"ast":null,"code":"import \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport { urlAlphabet } from './url-alphabet/index.js';\nif (true) {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * size / alphabet.length);\n  return () => {\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random);\nlet nanoid = (size = 21) => {\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n  while (size--) {\n    let byte = bytes[size] & 63;\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n  return id;\n};\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"names":["urlAlphabet","navigator","product","crypto","Error","msCrypto","random","bytes","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase"],"sources":["C:/Users/Utente/Local Sites/eventer/app/public/wp-content/plugins/eventer/core/node_modules/vue-chart-3/node_modules/nanoid/index.dev.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (true) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,IAAI,IAAI,EAAE;EACR,IACE,OAAOC,SAAS,KAAK,WAAW,IAChCA,SAAS,CAACC,OAAO,KAAK,aAAa,IACnC,OAAOC,MAAM,KAAK,WAAW,EAC7B;IACA,MAAM,IAAIC,KAAK,CACb,iEAAiE,GAC/D,+DAA+D,GAC/D,0DAA0D,GAC1D,iBAAiB,CACpB;EACH;EACA,IAAI,OAAOC,QAAQ,KAAK,WAAW,IAAI,OAAOF,MAAM,KAAK,WAAW,EAAE;IACpE,MAAM,IAAIC,KAAK,CACb,wEAAwE,GACtE,gDAAgD,CACnD;EACH;EACA,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;IACjC,MAAM,IAAIC,KAAK,CACb,sDAAsD,GACpD,qEAAqE,CACxE;EACH;AACF;AACA,IAAIE,MAAM,GAAGC,KAAK,IAAIJ,MAAM,CAACK,eAAe,CAAC,IAAIC,UAAU,CAACF,KAAK,CAAC,CAAC;AACnE,IAAIG,YAAY,GAAG,CAACC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,KAAK;EAChD,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAKC,IAAI,CAACC,GAAG,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAI,IAAI,CAAC;EAChE,IAAIC,IAAI,GAAG,CAAC,EAAG,GAAG,GAAGL,IAAI,GAAGF,IAAI,GAAID,QAAQ,CAACM,MAAM,CAAC;EACpD,OAAO,MAAM;IACX,IAAIG,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIb,KAAK,GAAGM,SAAS,CAACM,IAAI,CAAC;MAC3B,IAAIE,CAAC,GAAGF,IAAI;MACZ,OAAOE,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIT,QAAQ,CAACJ,KAAK,CAACc,CAAC,CAAC,GAAGP,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIM,EAAE,CAACH,MAAM,KAAKL,IAAI,EAAE,OAAOQ,EAAE;MACnC;IACF;EACF,CAAC;AACH,CAAC;AACD,IAAIE,cAAc,GAAG,CAACX,QAAQ,EAAEC,IAAI,KAAKF,YAAY,CAACC,QAAQ,EAAEC,IAAI,EAAEN,MAAM,CAAC;AAC7E,IAAIiB,MAAM,GAAG,CAACX,IAAI,GAAG,EAAE,KAAK;EAC1B,IAAIQ,EAAE,GAAG,EAAE;EACX,IAAIb,KAAK,GAAGJ,MAAM,CAACK,eAAe,CAAC,IAAIC,UAAU,CAACG,IAAI,CAAC,CAAC;EACxD,OAAOA,IAAI,EAAE,EAAE;IACb,IAAIY,IAAI,GAAGjB,KAAK,CAACK,IAAI,CAAC,GAAG,EAAE;IAC3B,IAAIY,IAAI,GAAG,EAAE,EAAE;MACbJ,EAAE,IAAII,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC;IACzB,CAAC,MAAM,IAAID,IAAI,GAAG,EAAE,EAAE;MACpBJ,EAAE,IAAI,CAACI,IAAI,GAAG,EAAE,EAAEC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,EAAE;IAC9C,CAAC,MAAM,IAAIF,IAAI,GAAG,EAAE,EAAE;MACpBJ,EAAE,IAAI,GAAG;IACX,CAAC,MAAM;MACLA,EAAE,IAAI,GAAG;IACX;EACF;EACA,OAAOA,EAAE;AACX,CAAC;AACD,SAASG,MAAM,EAAED,cAAc,EAAEZ,YAAY,EAAEV,WAAW,EAAEM,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}