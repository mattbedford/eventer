{"ast":null,"code":"import auth from '@/assets/auth';\nimport 'vue-good-table/dist/vue-good-table.css';\nimport { VueGoodTable } from 'vue-good-table';\nimport MessageAnnounce from './MessageAnnounce.vue';\nexport default {\n  name: 'DataPlay',\n  components: {\n    VueGoodTable,\n    MessageAnnounce\n  },\n  data() {\n    return {\n      announce: null,\n      badgesList: [],\n      columns: [{\n        label: 'Name',\n        field: 'name'\n      }, {\n        label: 'Surname',\n        field: 'surname'\n      }, {\n        label: 'Email',\n        field: 'email'\n      }, {\n        label: 'Company',\n        field: 'company'\n      }, {\n        label: 'Job title',\n        field: 'role'\n      }, {\n        label: 'Printed?',\n        field: this.isPrinted\n      }, {\n        label: 'Print',\n        field: 'print'\n      }, {\n        label: 'Link',\n        field: this.checkPrintStatus,\n        html: true\n      }]\n    };\n  },\n  mounted() {\n    this.getAllRegistrants();\n  },\n  methods: {\n    checkPrintStatus(rowObj) {\n      if (rowObj.badge_link && rowObj.printed === '1') {\n        return `<a href='${rowObj.badge_link}' target='_blank'>View</a>`;\n      }\n      if (!rowObj.badge_link && rowObj.printed === '1') {\n        return `See <a href='${document.location.origin}/wp-content/plugins/eventer/badges/all_badges.zip' target='_blank'>zip folder</a> of all badges`;\n      }\n      return 'Not printed yet';\n    },\n    async getAllRegistrants() {\n      this.badgesList = [];\n      const url = auth.allRegistrations;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce\n      };\n      fetch(url, {\n        method: 'GET',\n        headers\n      }).then(result => result.json()).then(result => {\n        this.badgesList = result;\n      });\n    },\n    async printMe(arr) {\n      const url = auth.printBadge;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce\n      };\n      const body = JSON.stringify({\n        ids: arr\n      });\n      fetch(url, {\n        method: 'POST',\n        headers,\n        body\n      }).then(result => result.json()).then(result => {\n        this.announce = result;\n      });\n    },\n    async printEverything() {\n      const allIds = this.badgesList.map(row => row.id);\n      this.printMe(allIds);\n    },\n    isPrinted(rowObj) {\n      return rowObj.printed === '1' ? 'Yes' : 'No';\n    },\n    killMessage() {\n      this.getAllRegistrants();\n      this.announce = null;\n    },\n    printSingleBadge(rowId) {\n      this.printMe([rowId]);\n    },\n    printAllBadges() {\n      // get ids from every row in badgesList variable\n      const allIds = this.badgesList.map(row => row.id);\n      this.printMe(allIds);\n    },\n    resetBadgeStatus() {\n      const url = auth.resetBadges;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce\n      };\n      fetch(url, {\n        method: 'GET',\n        headers\n      }).then(result => result.json()).then(result => {\n        this.announce = result;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AA2EA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IAAAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC,UACA;QACAC;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;MACA,GACA;QACAD;QACAC;QACAC;MACA;IAEA;EACA;EACAC;IACA;EACA;EACAC;IACAC;MACA;QACA;MACA;MACA;QACA;MACA;MACA;IACA;IACA;MACA;MACA;MACA;QACAC;QACA;QACA;MACA;MACAC;QAAAC;QAAAC;MAAA,GACAC,8BACAA;QACA;MACA;IACA;IACA;MACA;MACA;QACAJ;QACA;QACA;MACA;MACA;QAAAK;MAAA;MACAJ;QAAAC;QAAAC;QAAAG;MAAA,GACAF,8BACAA;QACA;MACA;IACA;IACA;MACA;MACA;IACA;IACAG;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;QACAX;QACA;QACA;MACA;MACAC;QAAAC;QAAAC;MAAA,GACAC,8BACAA;QACA;MACA;IACA;EACA;AACA","names":["name","components","VueGoodTable","MessageAnnounce","data","announce","badgesList","columns","label","field","html","mounted","methods","checkPrintStatus","credentials","fetch","method","headers","then","ids","body","isPrinted","killMessage","printSingleBadge","printAllBadges","resetBadgeStatus"],"sourceRoot":"src/components","sources":["DataPlay.vue"],"sourcesContent":["<template>\n  <div class=\"sub-section\" style=\"flex-direction:column;\">\n      <message-announce v-if=\"announce\" :message=\"announce\" @closeMessage=\"killMessage()\" />\n      <vue-good-table\n        :columns=\"columns\"\n        :rows=\"badgesList\"\n        theme=\"black-rhino\"\n        :search-options=\"{\n          enabled: true\n        }\"\n        :pagination-options=\"{\n            enabled: true,\n            perPage: 50,\n            position: 'bottom',\n        }\"\n        >\n        <template slot=\"table-row\" slot-scope=\"props\">\n          <div v-if=\"props.column.field == 'print'\">\n            <button\n              style=\"display:flex;\n                width:70px;\n                align-items:center;\n                justify-content:space-between;\n                padding-right:10px;\"\n                @click=\"printSingleBadge(props.row.id)\">\n              <svg style=\"width:20px;margin-right:10px;\" xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" viewBox=\"0 0 512 512\"><path fill=\"none\" stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M384 368h24a40.12 40.12 0 0 0 40-40V168a40.12 40.12 0 0 0-40-40H104a40.12 40.12 0 0 0-40 40v160a40.12 40.12 0 0 0 40 40h24\"/><rect width=\"256\" height=\"208\" x=\"128\" y=\"240\" fill=\"none\" stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"32\" rx=\"24.32\" ry=\"24.32\"/><path fill=\"none\" stroke=\"currentColor\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M384 128v-24a40.12 40.12 0 0 0-40-40H168a40.12 40.12 0 0 0-40 40v24\"/><circle cx=\"392\" cy=\"184\" r=\"24\"/></svg> Print\n            </button>\n          </div>\n        </template>\n      </vue-good-table>\n      <div class=\"export-section\" style=\"margin-top:50px !important;\">\n        <h3>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" viewBox=\"0 0 512 512\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M336 176h40a40 40 0 0 1 40 40v208a40 40 0 0 1-40 40H136a40 40 0 0 1-40-40V216a40 40 0 0 1 40-40h40\"/><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"m176 272 80 80 80-80M256 48v288\"/></svg>\n          Print all badges\n        </h3>\n        <p>This will print all people registered to the event, saving the file as a zip of PDFs.\n          Before using, please ensure you have synced with Hubspot\n          (Registrations page) to get the latest data.\n        </p>\n        <button class='exporter-butt'\n          @click=\"printEverything\"\n          style=\"background: #7fc41c;\n            padding: 8px 25px;\n            outline:none;\n            color: white;\n            text-decoration: none;\n            border:none;\n            cursor:pointer;\">\n          Print all badges\n        </button>\n      </div>\n\n      <div class=\"export-section\" style=\"margin-top:50px !important;\">\n        <h3>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"ionicon\" viewBox=\"0 0 512 512\"><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"28\" d=\"M288 193s12.18-6-32-6a80 80 0 1 0 80 80\"/><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"28\" d=\"m256 149 40 40-40 40\"/><path fill=\"none\" stroke=\"currentColor\" stroke-miterlimit=\"10\" stroke-width=\"32\" d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"/></svg>\n          Reset printed status\n        </h3>\n        <p>This will reset the badge status of each registration to <em>not printed</em>.\n           This is useful if you want to print all badges again.</p>\n        <button class='exporter-butt'\n          @click=\"resetBadgeStatus\"\n          style=\"background: #d76163;\n            padding: 8px 25px;\n            outline:none;\n            color: white;\n            text-decoration: none;\n            border:none;\n            cursor:pointer;\">\n          Reset all badges\n        </button>\n      </div>\n  </div>\n</template>\n\n<script>\nimport auth from '@/assets/auth';\nimport 'vue-good-table/dist/vue-good-table.css';\nimport { VueGoodTable } from 'vue-good-table';\nimport MessageAnnounce from './MessageAnnounce.vue';\n\nexport default {\n  name: 'DataPlay',\n  components: {\n    VueGoodTable, MessageAnnounce,\n  },\n  data() {\n    return {\n      announce: null,\n      badgesList: [],\n      columns: [\n        {\n          label: 'Name',\n          field: 'name',\n        },\n        {\n          label: 'Surname',\n          field: 'surname',\n        },\n        {\n          label: 'Email',\n          field: 'email',\n        },\n        {\n          label: 'Company',\n          field: 'company',\n        },\n        {\n          label: 'Job title',\n          field: 'role',\n        },\n        {\n          label: 'Printed?',\n          field: this.isPrinted,\n        },\n        {\n          label: 'Print',\n          field: 'print',\n        },\n        {\n          label: 'Link',\n          field: this.checkPrintStatus,\n          html: true,\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.getAllRegistrants();\n  },\n  methods: {\n    checkPrintStatus(rowObj) {\n      if (rowObj.badge_link && rowObj.printed === '1') {\n        return `<a href='${rowObj.badge_link}' target='_blank'>View</a>`;\n      }\n      if (!rowObj.badge_link && rowObj.printed === '1') {\n        return `See <a href='${document.location.origin}/wp-content/plugins/eventer/badges/all_badges.zip' target='_blank'>zip folder</a> of all badges`;\n      }\n      return 'Not printed yet';\n    },\n    async getAllRegistrants() {\n      this.badgesList = [];\n      const url = auth.allRegistrations;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce,\n      };\n      fetch(url, { method: 'GET', headers })\n        .then((result) => result.json())\n        .then((result) => {\n          this.badgesList = result;\n        });\n    },\n    async printMe(arr) {\n      const url = auth.printBadge;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce,\n      };\n      const body = JSON.stringify({ ids: arr });\n      fetch(url, { method: 'POST', headers, body })\n        .then((result) => result.json())\n        .then((result) => {\n          this.announce = result;\n        });\n    },\n    async printEverything() {\n      const allIds = this.badgesList.map((row) => row.id);\n      this.printMe(allIds);\n    },\n    isPrinted(rowObj) {\n      return rowObj.printed === '1' ? 'Yes' : 'No';\n    },\n    killMessage() {\n      this.getAllRegistrants();\n      this.announce = null;\n    },\n    printSingleBadge(rowId) {\n      this.printMe([rowId]);\n    },\n    printAllBadges() {\n      // get ids from every row in badgesList variable\n      const allIds = this.badgesList.map((row) => row.id);\n      this.printMe(allIds);\n    },\n    resetBadgeStatus() {\n      const url = auth.resetBadges;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce,\n      };\n      fetch(url, { method: 'GET', headers })\n        .then((result) => result.json())\n        .then((result) => {\n          this.announce = result;\n        });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}