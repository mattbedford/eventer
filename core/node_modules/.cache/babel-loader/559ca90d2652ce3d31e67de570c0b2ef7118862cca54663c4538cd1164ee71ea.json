{"ast":null,"code":"import auth from '@/assets/auth';\nimport MessageAnnounce from './MessageAnnounce.vue';\nexport default {\n  name: 'SetUp',\n  components: {\n    MessageAnnounce\n  },\n  data() {\n    return {\n      menuItem: 'globals',\n      announce: null,\n      globals: {\n        event_name: 'xxxx',\n        event_payoff: 'ccccc',\n        event_date: null,\n        event_start: null,\n        event_end: null\n      },\n      apis: {\n        alt_stripe_key: null,\n        event_tag: null,\n        hubspot_list: null,\n        hubspot_key: null\n      },\n      venue: {\n        venue_name: null,\n        venue_address: null,\n        venue_city: null,\n        venue_country: null,\n        max_attendees: null,\n        ticket_price: null\n      },\n      badges: {\n        badge_template: null,\n        badge_x: null,\n        badge_y: null,\n        badge_x_p2: null,\n        badge_y_p2: null,\n        badge_namebreak: null,\n        badge_company_format: {\n          color: null,\n          fontsize: null,\n          align: null,\n          caps: null\n        },\n        badge_job_format: {\n          color: null,\n          fontsize: null,\n          align: null,\n          caps: null\n        },\n        badge_name_format: {\n          color: null,\n          fontsize: null,\n          align: null,\n          caps: null\n        }\n      }\n    };\n  },\n  methods: {\n    killMessage() {\n      this.announce = null;\n    },\n    async sendOptions(dataObj) {\n      const data = JSON.stringify(this[dataObj]);\n      const url = auth.optionsRoute;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce\n      };\n      fetch(url, {\n        method: 'POST',\n        headers,\n        body: data\n      }).then(result => result.json()).then(result => {\n        this.announce = result;\n      });\n    },\n    async getAllOptions() {\n      const url = auth.AllOptionsRoute;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce\n      };\n      fetch(url, {\n        method: 'GET',\n        headers\n      }).then(result => result.json()).then(result => {\n        Object.entries(result).forEach(([key]) => {\n          const reskey = result[key][0];\n          const resval = result[key][1];\n          if (this.globals[reskey] || this.globals[reskey] === null) {\n            this.globals[reskey] = resval;\n          }\n          if (this.apis[reskey] || this.apis[reskey] === null) {\n            this.apis[reskey] = resval;\n          }\n          if (this.venue[reskey] || this.venue[reskey] === null) {\n            this.venue[reskey] = resval;\n          }\n          if (this.badges[reskey] || this.badges[reskey] === null) {\n            this.badges[reskey] = resval;\n          }\n        });\n      });\n    },\n    async badgeUpload() {\n      const file = document.getElementById('badge_template').files[0];\n      const formData = new FormData();\n      formData.append('file', file);\n      const url = `${auth.rootUrl}/wp-json/wp/v2/media/`;\n      const headers = {\n        credentials: 'same-origin',\n        'X-WP-Nonce': this.nonce\n      };\n      fetch(url, {\n        method: 'POST',\n        headers,\n        body: formData\n      }).then(result => result.json()).then(result => {\n        if (result.id) {\n          this.badges.badge_template = result.source_url;\n        } else {\n          this.announce = ['Error', 'Something went wrong with your upload. Please check file and try again.'];\n        }\n      });\n    }\n  },\n  mounted() {\n    this.getAllOptions();\n  }\n};","map":{"version":3,"mappings":"AAoNA;AACA;AAEA;EAEAA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACAC;UACAJ;UACAC;UACAC;UACAC;QACA;QACAE;UACAL;UACAC;UACAC;UACAC;QACA;MACA;IACA;EACA;EACAG;IACAC;MACA;IACA;IACA;MACA;MACA;MACA;QACAC;QACA;QACA;MACA;MACAC;QAAAC;QAAAC;QAAAC;MAAA,GACAC,8BACAA;QAAA;MAAA;IACA;IACA;MACA;MACA;QACAL;QACA;QACA;MACA;MACAC;QAAAC;QAAAC;MAAA,GACAE,8BACAA;QACAC;UACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;UACA;YACA;UACA;QACA;MACA;IACA;IACA;MACA;MACA;MACAC;MACA;MACA;QACAP;QACA;MACA;MACAC;QAAAC;QAAAC;QAAAC;MAAA,GACAC,8BACAA;QACA;UACA;QACA;UACA;QACA;MACA;IACA;EACA;EACAG;IACA;EACA;AACA","names":["name","components","MessageAnnounce","data","menuItem","announce","globals","event_name","event_payoff","event_date","event_start","event_end","apis","alt_stripe_key","event_tag","hubspot_list","hubspot_key","venue","venue_name","venue_address","venue_city","venue_country","max_attendees","ticket_price","badges","badge_template","badge_x","badge_y","badge_x_p2","badge_y_p2","badge_namebreak","badge_company_format","color","fontsize","align","caps","badge_job_format","badge_name_format","methods","killMessage","credentials","fetch","method","headers","body","then","Object","formData","mounted"],"sourceRoot":"src/components","sources":["setup.vue"],"sourcesContent":["<template>\n  <div class=\"sub-section\">\n    <div class=\"side-column\">\n        <ul class=\"submenu\">\n            <li :class=\"{'active' : menuItem == 'globals'}\">\n                <button @click=\"menuItem = 'globals'\">Event globals</button>\n            </li>\n            <li :class=\"{'active' : menuItem == 'apis'}\">\n                <button @click=\"menuItem = 'apis'\">APIs</button>\n            </li>\n            <li :class=\"{'active' : menuItem == 'venue'}\">\n                <button @click=\"menuItem = 'venue'\">Venue and tickets</button>\n            </li>\n            <li :class=\"{'active' : menuItem == 'badges'}\">\n                <button @click=\"menuItem = 'badges'\">Badge design</button>\n            </li>\n        </ul>\n    </div>\n    <message-announce v-if=\"announce\" :message=\"announce\" @closeMessage=\"killMessage()\" />\n    <div v-show=\"menuItem == 'globals'\" class=\"main-column\">\n        <h3>Global setup</h3>\n        <form id=\"globals\" @submit.prevent=\"sendOptions('globals')\">\n            <label for=\"name\">Event name\n            <input type=\"text\" id=\"name\" v-model=\"globals.event_name\"/></label>\n            <label for=\"payoff\">Event payoff\n            <input type=\"text\" id=\"payoff\" v-model=\"globals.event_payoff\"/></label>\n            <label for=\"date\">Event date\n            <input type=\"date\" id=\"date\" v-model=\"globals.event_date\"/></label>\n            <div class=\"double\">\n                <label for=\"start\">Check in time\n                <input type=\"time\" id=\"start\" v-model=\"globals.event_start\"/></label>\n                <label for=\"end\">Event end time\n                <input type=\"time\" id=\"end\" v-model=\"globals.event_end\"/></label>\n            </div>\n\n            <input type=\"submit\" value=\"Save edits\"/>\n        </form>\n    </div>\n\n    <div v-show=\"menuItem == 'apis'\" class=\"main-column\">\n        <h3>APIs setup</h3>\n        <form id=\"apis\" @submit.prevent=\"sendOptions('apis')\">\n            <label for=\"stripe_key\">Stripe API key\n            <input type=\"text\" id=\"stripe_key\" v-model=\"apis.alt_stripe_key\"/></label>\n            <label for=\"hubspot-api\">Hubspot API key\n            <input type=\"text\" id=\"hubspot-api\" v-model=\"apis.hubspot_key\"/></label>\n            <div class=\"double\">\n                <label for=\"hubspot-list\">Hubspot list ID\n                <input type=\"text\" id=\"hubspot-list\" v-model=\"apis.hubspot_list\"/></label>\n                <label for=\"tag\">Hubspot event tag (used in form to link to static list)\n                <input type=\"text\" id=\"tag\" v-model=\"apis.event_tag\"/></label>\n            </div>\n\n            <input type=\"submit\" value=\"Save edits\"/>\n        </form>\n    </div>\n\n    <div v-show=\"menuItem == 'venue'\" class=\"main-column\">\n        <h3>Venue and tickets</h3>\n        <form id=\"venue\" @submit.prevent=\"sendOptions('venue')\">\n            <label for=\"venue_name\">Name of venue\n            <input type=\"text\" id=\"venue_name\" v-model=\"venue.venue_name\"/></label>\n            <label for=\"venue_address\">Venue address\n            <input type=\"text\" id=\"venue_address\" v-model=\"venue.venue_address\"/></label>\n            <div class=\"double\">\n              <label for=\"venue_city\">Venue city\n              <input type=\"text\" id=\"venue_city\" v-model=\"venue.venue_city\"/></label>\n              <label for=\"venue_country\">Venue country\n              <input type=\"text\" id=\"venue_country\" v-model=\"venue.venue_country\"/></label>\n            </div>\n            <label for=\"venue_max\">Maximum attendees permitted\n            <input type=\"number\" id=\"venue_max\" v-model=\"venue.max_attendees\"/></label>\n            <label for=\"ticket_price\">Ticket price\n            <input type=\"number\" id=\"ticket_price\" v-model=\"venue.ticket_price\"/></label>\n            <input type=\"submit\" value=\"Save edits\"/>\n        </form>\n    </div>\n\n    <div v-show=\"menuItem == 'badges'\" class=\"main-column\">\n        <h3>Badge layout</h3>\n        <form id=\"badge\" @submit.prevent=\"sendOptions('badges')\">\n            <label for=\"badge_template\">Badge template\n              <span v-if=\"badges.badge_template\" style=\"font-weight:600; color:#7fc41c;\">\n                Current: {{ badges.badge_template }}\n              </span>\n            <input type=\"file\" id=\"badge_template\" @change=\"badgeUpload()\"/></label>\n\n            <p>Text positioning badge page 1</p>\n            <div class=\"double\">\n              <label for=\"p1x\">X coordinate\n              <input type=\"number\" id=\"p1x\" v-model=\"badges.badge_x\"/></label>\n              <label for=\"p1y\">Y coordinate\n              <input type=\"number\" id=\"p1y\" v-model=\"badges.badge_y\"/></label>\n            </div>\n            <p>Text positioning badge page 2</p>\n            <div class=\"double\">\n              <label for=\"p2x\">X coordinate\n              <input type=\"number\" id=\"p2x\" v-model=\"badges.badge_x_p2\"/></label>\n              <label for=\"p2y\">Y coordinate\n              <input type=\"number\" id=\"p2y\" v-model=\"badges.badge_y_p2\"/></label>\n            </div>\n            <br>\n            <hr>\n            <p>Badge <strong>name field</strong></p>\n            <label for=\"namebreak\" style=\"display:flex;flex-direction: row;\">\n              <input type=\"checkbox\" name=\"namebreak\" v-model=\"badges.badge_namebreak\"/>\n              <span style=\"position: relative;top: -3px;\">Break name into two lines?</span>\n            </label>\n            <div class=\"double\">\n              <label for=\"bnamecolor\">Color\n              <select id=\"bnamecolor\" v-model=\"badges.badge_name_format.color\">\n                <option value=\"black\">Black</option>\n                <option value=\"dark\">Dark</option>\n                <option value=\"luxury\">Luxury</option>\n                <option value=\"blue\">Dagorà blue</option>\n                <option value=\"green\">Dagorà green</option>\n                <option value=\"purple\">Dagorà purple</option>\n              </select>\n              </label>\n              <label for=\"bnamefontsize\">Font size\n              <input type=\"number\" id=\"bnamefontsize\"\n              v-model=\"badges.badge_name_format.fontsize\"/></label>\n            </div>\n            <div class=\"double\">\n              <label for=\"bnamealign\">Text align\n              <select id=\"bnamealign\" v-model=\"badges.badge_name_format.align\">\n                <option value=\"L\">Left</option>\n                <option value=\"C\">Center</option>\n                <option value=\"R\">Right</option>\n              </select>\n              </label>\n              <label for=\"bnamecaps\">Capitalize text?\n                <select id=\"bnamecaps\" v-model=\"badges.badge_name_format.caps\">\n                <option value=\"no\">No. Don't capitalize</option>\n                <option value=\"yes\">Yes. All caps.</option>\n              </select>\n              </label>\n            </div>\n\n            <hr>\n            <p>Badge <strong>job title field</strong></p>\n            <div class=\"double\">\n              <label for=\"bjobcolor\">Color\n              <select id=\"bjobcolor\" v-model=\"badges.badge_job_format.color\">\n                <option value=\"black\">Black</option>\n                <option value=\"dark\">Dark</option>\n                <option value=\"luxury\">Luxury</option>\n                <option value=\"blue\">Dagorà blue</option>\n                <option value=\"green\">Dagorà green</option>\n                <option value=\"purple\">Dagorà purple</option>\n              </select>\n              </label>\n              <label for=\"bjobfontsize\">Font size\n              <input type=\"number\" id=\"bjobfontsize\"\n              v-model=\"badges.badge_job_format.fontsize\"/></label>\n            </div>\n            <div class=\"double\">\n              <label for=\"bjobalign\">Text align\n              <select id=\"bjobalign\" v-model=\"badges.badge_job_format.align\">\n                <option value=\"L\">Left</option>\n                <option value=\"C\">Center</option>\n                <option value=\"R\">Right</option>\n              </select>\n              </label>\n              <label for=\"bjobcaps\">Capitalize text?\n                <select id=\"bjobcaps\" v-model=\"badges.badge_job_format.caps\">\n                <option value=\"no\">No. Don't capitalize</option>\n                <option value=\"yes\">Yes. All caps.</option>\n              </select>\n              </label>\n            </div>\n\n            <hr>\n            <p>Badge <strong>company field</strong></p>\n            <div class=\"double\">\n              <label for=\"bcompcolor\">Color\n              <select id=\"bcompcolor\" v-model=\"badges.badge_company_format.color\">\n                <option value=\"black\">Black</option>\n                <option value=\"dark\">Dark</option>\n                <option value=\"luxury\">Luxury</option>\n                <option value=\"blue\">Dagorà blue</option>\n                <option value=\"green\">Dagorà green</option>\n                <option value=\"purple\">Dagorà purple</option>\n              </select>\n              </label>\n              <label for=\"bcompfontsize\">Font size\n              <input type=\"number\" id=\"bcompfontsize\"\n              v-model=\"badges.badge_company_format.fontsize\"/></label>\n            </div>\n            <div class=\"double\">\n              <label for=\"bcompalign\">Text align\n              <select id=\"bcompalign\" v-model=\"badges.badge_company_format.align\">\n                <option value=\"L\">Left</option>\n                <option value=\"C\">Center</option>\n                <option value=\"R\">Right</option>\n              </select>\n              </label>\n              <label for=\"bcompcaps\">Capitalize text?\n                <select id=\"bcompcaps\" v-model=\"badges.badge_company_format.caps\">\n                <option value=\"no\">No. Don't capitalize</option>\n                <option value=\"yes\">Yes. All caps.</option>\n              </select>\n              </label>\n            </div>\n\n            <input type=\"submit\" value=\"Save edits\"/>\n        </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport auth from '@/assets/auth';\nimport MessageAnnounce from './MessageAnnounce.vue';\n\nexport default {\n\n  name: 'SetUp',\n  components: {\n    MessageAnnounce,\n  },\n  data() {\n    return {\n      menuItem: 'globals',\n      announce: null,\n      globals: {\n        event_name: 'xxxx',\n        event_payoff: 'ccccc',\n        event_date: null,\n        event_start: null,\n        event_end: null,\n      },\n      apis: {\n        alt_stripe_key: null,\n        event_tag: null,\n        hubspot_list: null,\n        hubspot_key: null,\n      },\n      venue: {\n        venue_name: null,\n        venue_address: null,\n        venue_city: null,\n        venue_country: null,\n        max_attendees: null,\n        ticket_price: null,\n      },\n      badges: {\n        badge_template: null,\n        badge_x: null,\n        badge_y: null,\n        badge_x_p2: null,\n        badge_y_p2: null,\n        badge_namebreak: null,\n        badge_company_format: {\n          color: null,\n          fontsize: null,\n          align: null,\n          caps: null,\n        },\n        badge_job_format: {\n          color: null,\n          fontsize: null,\n          align: null,\n          caps: null,\n        },\n        badge_name_format: {\n          color: null,\n          fontsize: null,\n          align: null,\n          caps: null,\n        },\n      },\n    };\n  },\n  methods: {\n    killMessage() {\n      this.announce = null;\n    },\n    async sendOptions(dataObj) {\n      const data = JSON.stringify(this[dataObj]);\n      const url = auth.optionsRoute;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce,\n      };\n      fetch(url, { method: 'POST', headers, body: data })\n        .then((result) => result.json())\n        .then((result) => { this.announce = result; });\n    },\n    async getAllOptions() {\n      const url = auth.AllOptionsRoute;\n      const headers = {\n        credentials: 'same-origin',\n        'Content-Type': 'application/json',\n        'X-WP-Nonce': this.nonce,\n      };\n      fetch(url, { method: 'GET', headers })\n        .then((result) => result.json())\n        .then((result) => {\n          Object.entries(result).forEach(([key]) => {\n            const reskey = result[key][0];\n            const resval = result[key][1];\n            if (this.globals[reskey] || this.globals[reskey] === null) {\n              this.globals[reskey] = resval;\n            }\n            if (this.apis[reskey] || this.apis[reskey] === null) {\n              this.apis[reskey] = resval;\n            }\n            if (this.venue[reskey] || this.venue[reskey] === null) {\n              this.venue[reskey] = resval;\n            }\n            if (this.badges[reskey] || this.badges[reskey] === null) {\n              this.badges[reskey] = resval;\n            }\n          });\n        });\n    },\n    async badgeUpload() {\n      const file = document.getElementById('badge_template').files[0];\n      const formData = new FormData();\n      formData.append('file', file);\n      const url = `${auth.rootUrl}/wp-json/wp/v2/media/`;\n      const headers = {\n        credentials: 'same-origin',\n        'X-WP-Nonce': this.nonce,\n      };\n      fetch(url, { method: 'POST', headers, body: formData })\n        .then((result) => result.json())\n        .then((result) => {\n          if (result.id) {\n            this.badges.badge_template = result.source_url;\n          } else {\n            this.announce = ['Error', 'Something went wrong with your upload. Please check file and try again.'];\n          }\n        });\n    },\n  },\n  mounted() {\n    this.getAllOptions();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}